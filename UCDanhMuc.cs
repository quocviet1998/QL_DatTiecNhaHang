using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DevExpress.DataAccess.Sql;
using DevExpress.DataAccess.ConnectionParameters;
using QL_DatTiecNhaHang.QLDatTiecNhaHang;
using QL_DatTiecNhaHang.CustomClasses;
using System.Configuration;

namespace QL_DatTiecNhaHang
{
    public partial class UCDanhMuc : DevExpress.XtraEditors.XtraUserControl
    {
        #region Declare parameters
        public event EventHandler _Add;
        public event EventHandler _Update;
        public event EventHandler _Delete;
        public event EventHandler _Load;
        public string sqlCommandString;
        public SqlDataSource dataSource;
        public UCDanhMuc()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            monanTableAdapter2.Fill(qlDatTiecNhaHangDataSet1.MONAN);
        }

        #endregion
        
        #region Private functions
        private void BindingTable(string name)
        {
            SqlDataSource sqlDataSource = new SqlDataSource(new CustomStringConnectionParameters(
                 Connection.connectionString ));
            CustomSqlQuery customSqlQuery = new CustomSqlQuery("cq", "select * from nhanvien");
            SqlDataSource.DisableCustomQueryValidation = true;
            sqlDataSource.Queries.Clear();
            sqlDataSource.Queries.Add(customSqlQuery);
            sqlDataSource.Fill();
            gridControl1.DataSource = sqlDataSource;
            gridControl1.DataMember = "cq";
        }

        private Dictionary<string, string> splitConnectionString()
        {
            var connectStr = ConfigurationManager.
    ConnectionStrings["DESKTOP-TC830C5_QLDatTiecNhaHang"].ConnectionString;

            var arr = connectStr.Split(';');
            string[] value;

            var dic = new Dictionary<string, string>();
            foreach (var item in arr)
            {
                value = item.Trim().Split('=');
                if (value[0].ToLower() == "data source"
                    || value[0].ToLower() == "initial catalog"
                    || value[0].ToLower() == "user id"
                    || value[0].ToLower() == "password")
                    dic.Add(value[0], value[1]);
            }
            return dic;
        }

        private MsSqlConnectionParameters setConnectionString()
        {
            var list = splitConnectionString();
            string serverName, dbName, userId, password;

            serverName = list.FirstOrDefault(x => x.Key == "data source").Value;
            dbName = list.FirstOrDefault(x => x.Key == "initial catalog").Value;
            userId = list.FirstOrDefault(x => x.Key == "user id").Value;
            password = list.FirstOrDefault(x => x.Key == "password").Value;

            MsSqlConnectionParameters ms = new MsSqlConnectionParameters(
                serverName, dbName, userId, password,
                (userId != null && password != null) ?
                MsSqlAuthorizationType.SqlServer : MsSqlAuthorizationType.Windows);
            return ms;
        }


        #endregion

        #region Events

        private void UCDanhMuc_Load(object sender, EventArgs e)
        {
            OnLoad(e);
            
        }

        private void btnThem_Click(object sender, EventArgs e)
        {
            OnAdd(e);
            MessageBox.Show("Vừa click button thêm");
            
        }

        private void btnXoa_Click(object sender, EventArgs e)
        {
            OnUpdate(e);
            MessageBox.Show("Vừa click button thêm");
        }

        private void btnSua_Click(object sender, EventArgs e)
        {
            OnDelete(e);
            MessageBox.Show("Vừa click button thêm");
        }
        #endregion

        #region Protected functions

        protected void OnLoad(EventArgs e)
        {
            EventHandler load = _Load;
            if (load != null)
                load(this, e);
            
        }

        protected void OnAdd(EventArgs e)
        {
            EventHandler add = _Add;
            if (add != null)
                add(this, e);
        }

        protected void OnUpdate(EventArgs e)
        {
            EventHandler update = _Update;
            if (update != null)
                update(this, e);
        }

        protected void OnDelete(EventArgs e)
        {
            EventHandler delete = _Delete;
            if (delete != null)
                delete(this, e);
        }

        #endregion

    }
}
